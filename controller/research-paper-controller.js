import mongoose from "mongoose";
import ResearchPaperService from "../services/research-paper-service.js";
import { S3Client, GetObjectCommand, PutObjectCommand } from "@aws-sdk/client-s3";
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";
import fs from "fs";

const researchPaperService = new ResearchPaperService();

// Use correct env variable names for AWS credentials
const s3 = new S3Client({
  region: process.env.AWS_REGION,
  credentials: {
    accessKeyId: process.env.ACCESS_KEY,
    secretAccessKey: process.env.SECRET_ACCESS_KEY,
  },
});

const uploadPdfToS3 = async (file) => {
  // Uploads file to S3 and returns the public S3 URL (not a signed URL)
  // For downloads, always use the signed URL generated by getSignedPdfUrl
  const fileStream = fs.createReadStream(file.path);
  const key = `research-papers/${Date.now()}_${file.originalname}`;
  const params = {
    Bucket: process.env.S3_BUCKET_NAME,
    Key: key,
    Body: fileStream,
    ContentType: file.mimetype,
  };
  const result = await s3.send(new PutObjectCommand(params));
  console.log("S3 upload result:", result, "Key used:", key);

  // Optionally, remove temp file after upload
  fs.unlink(file.path, (err) => {
    if (err) console.error("Error deleting temp file:", err);
  });

  return `https://${params.Bucket}.s3.${process.env.AWS_REGION}.amazonaws.com/${key}`;
};

const createPaper = async (req, res) => {
  try {
    if (!req.user?._id) return res.status(401).json({ success: false, message: "Unauthorized", data: {}, err: "Missing user ID" });

    // Check for PDF file
    if (!req.file) {
      return res.status(400).json({ success: false, message: "PDF file missing", data: {}, err: "No PDF file uploaded" });
    }

    let pdfUrl = "";
    try {
      pdfUrl = await uploadPdfToS3(req.file);
      console.log("PDF uploaded to S3, url:", pdfUrl);
    } catch (err) {
      console.error("S3 upload error:", err);
      return res.status(500).json({ success: false, message: "PDF upload failed", data: {}, err: err.message });
    }

    // Parse authors and mentors if sent as JSON string
    let authors = req.body.authors;
    if (typeof authors === "string") {
      try {
        authors = JSON.parse(authors);
      } catch (err) {
        console.error("Authors JSON parse error:", err);
        return res.status(400).json({ success: false, message: "Invalid authors format", data: {}, err: err.message });
      }
    }
    let mentors = req.body.mentors;
    if (typeof mentors === "string") {
      try {
        mentors = JSON.parse(mentors);
      } catch (err) {
        console.error("Mentors JSON parse error:", err);
        return res.status(400).json({ success: false, message: "Invalid mentors format", data: {}, err: err.message });
      }
    }

    // Validate required fields (remove .trim() for arrays/objects)
    const requiredFields = [
      "title", "abstract", "keywords", "introduction", "objective", "literature",
      "methodology", "experimentalResults", "discussion", "conclusion",
      "publicationDate", "category"
    ];
    for (const field of requiredFields) {
      if (
        req.body[field] === undefined ||
        req.body[field] === null ||
        (typeof req.body[field] === "string" && req.body[field].trim() === "")
      ) {
        return res.status(400).json({ success: false, message: `${field} is required`, data: {}, err: `${field} missing` });
      }
    }
    if (!authors || !Array.isArray(authors) || authors.length === 0) {
      return res.status(400).json({ success: false, message: "At least one author is required", data: {}, err: "authors missing" });
    }
    for (const a of authors) {
      if (!a.name || !a.affiliation) {
        return res.status(400).json({ success: false, message: "Each author must have name and affiliation", data: {}, err: "author fields missing" });
      }
    }
    if (mentors && Array.isArray(mentors)) {
      for (const m of mentors) {
        if (!m.name) {
          return res.status(400).json({ success: false, message: "Each mentor must have a name", data: {}, err: "mentor name missing" });
        }
      }
    }

    const data = {
      ...req.body,
      authors,
      mentors,
      pdfUrl,
      createdBy: req.user._id,
    };

    // Log before DB save
    console.log("Saving paper to DB with data:", data);

    const paper = await researchPaperService.createPaper(data);

    // Log after DB save
    console.log("Paper saved to DB:", paper);

    return res.status(201).json({ success: true, message: "Research paper created successfully", data: paper, err: {} });
  } catch (error) {
    console.error("Create paper error:", error);
    return res.status(500).json({ success: false, message: "Error creating research paper", data: {}, err: error.message });
  }
};

const updatePaper = async (req, res) => {
  try {
    if (!req.user?._id) return res.status(401).json({ success: false, message: "Unauthorized", data: {}, err: "Missing user ID" });

    const paper = await researchPaperService.updatePaper(req.params.id, req.body, req.user._id.toString());
    return res.status(200).json({ success: true, message: "Research paper updated successfully", data: paper, err: {} });
  } catch (error) {
    return res.status(500).json({ success: false, message: "Error updating research paper", data: {}, err: error.message });
  }
};

const deletePaper = async (req, res) => {
  try {
    if (!req.user?._id) return res.status(401).json({ success: false, message: "Unauthorized", data: {}, err: "Missing user ID" });

    await researchPaperService.deletePaper(req.params.id, req.user._id.toString());
    return res.status(200).json({ success: true, message: "Research paper deleted successfully", data: {}, err: {} });
  } catch (error) {
    return res.status(500).json({ success: false, message: "Error deleting research paper", data: {}, err: error.message });
  }
};

const getPaper = async (req, res) => {
  try {
    const paper = await researchPaperService.getPaper(req.params.id, true);
    return res.status(200).json({ success: true, message: "Research paper retrieved successfully", data: paper, err: {} });
  } catch (error) {
    return res.status(500).json({ success: false, message: "Error retrieving research paper", data: {}, err: error.message });
  }
};

const getAllPapers = async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const filters = {};

    if (req.query.affiliation) filters["authors.affiliation"] = req.query.affiliation;
    if (req.query.isPublished !== undefined) filters.isPublished = req.query.isPublished === "true";
    if (req.query.category) filters.category = req.query.category; // added category filter

    const result = await researchPaperService.getAllPapers(page, limit, filters);
    return res.status(200).json({ success: true, message: "Research papers retrieved successfully", data: result, err: {} });
  } catch (error) {
    return res.status(500).json({ success: false, message: "Error retrieving research papers", data: {}, err: error.message });
  }
};

const searchPapers = async (req, res) => {
  try {
    const { query } = req.query;
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;

    const result = await researchPaperService.searchPapers(query, page, limit);
    return res.status(200).json({ success: true, message: "Research papers retrieved successfully", data: result, err: {} });
  } catch (error) {
    return res.status(500).json({ success: false, message: "Error searching research papers", data: {}, err: error.message });
  }
};

export {
  createPaper,
  updatePaper,
  deletePaper,
  getPaper,
  getAllPapers,
  searchPapers
};

export const getSignedPdfUrl = async (req, res) => {
  try {
    const { id } = req.params;
    const paper = await researchPaperService.getPaper(id, false);
    if (!paper || !paper.pdfUrl) {
      console.error("PDF not found or pdfUrl missing for paperId:", id);
      return res.status(404).json({ success: false, message: "PDF not found" });
    }

    let key = "";
    try {
      const url = new URL(paper.pdfUrl);
      key = url.pathname.startsWith("/") ? url.pathname.slice(1) : url.pathname;
      if (!key.startsWith("research-papers/")) {
        const idx = key.indexOf("research-papers/");
        if (idx !== -1) key = key.slice(idx);
      }
    } catch (err) {
      console.error("Error parsing pdfUrl:", paper.pdfUrl, err);
      return res.status(500).json({ success: false, message: "Invalid pdfUrl format" });
    }

    if (!key || !key.startsWith("research-papers/")) {
      console.error("S3 key extraction failed for pdfUrl:", paper.pdfUrl, "Extracted key:", key);
      return res.status(404).json({ success: false, message: "PDF not found" });
    }

    // Log key and bucket before requesting signed URL
    console.log("Generating signed URL for key:", key, "bucket:", process.env.S3_BUCKET_NAME);

    const command = new GetObjectCommand({
      Bucket: process.env.S3_BUCKET_NAME,
      Key: key,
    });
    const signedUrl = await getSignedUrl(s3, command, { expiresIn: 60 * 5 }); // 5 minutes

    return res.status(200).json({ success: true, url: signedUrl });
  } catch (error) {
    console.error("Get signed PDF URL error:", error);
    return res.status(500).json({ success: false, message: "Error generating signed URL", error: error.message });
  }
};
  